"Aa1 - Aa2", "Aa2 - Aa1")
View(sum.resAa.Aa)
for(i in seq(from=1, by=8, length.out=1000)){
for(j in 1:5){
sum.resAa.Aa[, j] <- sum.res[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Aa[counter, 6] <- sum.resAa.Aa[counter, 6] + 1
}
counter <- counter + 1
}
}
for(i in seq(from=1, by=8, length.out=1000)){
for(j in 1:5){
sum.resAa.Aa[, j] <- sum.resAa.Aa[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Aa[counter, 6] <- sum.resAa.Aa[counter, 6] + 1
}
counter <- counter + 1
}
}
View(sum.resAa.Aa)
# Parsing out Aa and Ad
sum.resAa.Ad <- as.data.frame(matrix(0,6,6))
colnames(sum.resAa.Ad) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAa.Ad) <- c("Aa1 / Aa2", "Aa2 / Aa1", "Aa1 * Aa2", "Aa + Aa",
"Aa1 - Aa2", "Aa2 - Aa1")
View(sum.resAa.Ad)
for(i in seq(from=8001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAa.Ad[, j] <- sum.res[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Ad[counter, 6] <- sum.resAa.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
for(i in seq(from=8001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAa.Ad[, j] <- sum.resAa.Ad[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Ad[counter, 6] <- sum.resAa.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
View(sum.resAa.Ad)
res <- read.csv("../results/sim.results.csv")
# Parsing out Ad and Ad
sum.resAd.Ad <- as.data.frame(matrix(0,6,6))
colnames(sum.resAd.Ad) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAd.Ad) <- c("Aa1 / Aa2", "Aa2 / Aa1", "Aa1 * Aa2", "Aa + Aa",
"Aa1 - Aa2", "Aa2 - Aa1")
for(i in seq(from=8001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAd.Ad[, j] <- sum.resAd.Ad[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAd.Ad[counter, 6] <- sum.resAd.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
View(sum.resAd.Ad)
res <- read.csv("../results/sim.results.csv")
# Parsing out Aa and Aa
sum.resAa.Aa <- as.data.frame(matrix(0,6,6))
colnames(sum.resAa.Aa) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAa.Aa) <- c("Aa1 / Aa2", "Aa2 / Aa1", "Aa1 * Aa2", "Aa1 + Aa2",
"Aa1 - Aa2", "Aa2 - Aa1")
for(i in seq(from=1, by=8, length.out=1000)){
for(j in 1:5){
sum.resAa.Aa[, j] <- sum.resAa.Aa[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Aa[counter, 6] <- sum.resAa.Aa[counter, 6] + 1
}
counter <- counter + 1
}
}
# Parsing out Aa and Ad
sum.resAa.Ad <- as.data.frame(matrix(0,6,6))
colnames(sum.resAa.Ad) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAa.Ad) <- c("Aa / Ad", "Ad / Aa", "Aa * Ad", "Aa + Ad",
"Aa - Ad", "Ad - Aa") # these now names change
for(i in seq(from=8001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAa.Ad[, j] <- sum.resAa.Ad[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Ad[counter, 6] <- sum.resAa.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
# Parsing out Ad and Ad
sum.resAd.Ad <- as.data.frame(matrix(0,6,6))
colnames(sum.resAd.Ad) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAd.Ad) <- c("Ad1 / Ad2", "Ad2 / Ad1", "Ad1 * Ad2", "Ad1 + Ad2",
"Ad1 - Ad2", "Ad2 - Ad1")
for(i in seq(from=24001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAd.Ad[, j] <- sum.resAd.Ad[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAd.Ad[counter, 6] <- sum.resAd.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
View(sum.resAa.Aa)
View(sum.resAa.Ad)
View(sum.resAd.Ad)
View(sum.resAa.Aa)
res <- read.csv("../results/sim.results.csv")
# Parsing out Aa and Aa
sum.resAa.Aa <- as.data.frame(matrix(0,6,6))
colnames(sum.resAa.Aa) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAa.Aa) <- c("Aa1 / Aa2", "Aa2 / Aa1", "Aa1 * Aa2", "Aa1 + Aa2",
"Aa1 - Aa2", "Aa2 - Aa1")
for(i in seq(from=1, by=8, length.out=1000)){
for(j in 1:5){
sum.resAa.Aa[, j] <- sum.resAa.Aa[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Aa[counter, 6] <- sum.resAa.Aa[counter, 6] + 1
}
counter <- counter + 1
}
}
# Parsing out Aa and Ad
sum.resAa.Ad <- as.data.frame(matrix(0,6,6))
colnames(sum.resAa.Ad) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAa.Ad) <- c("Aa / Ad", "Ad / Aa", "Aa * Ad", "Aa + Ad",
"Aa - Ad", "Ad - Aa") # these now names change
for(i in seq(from=8001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAa.Ad[, j] <- sum.resAa.Ad[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Ad[counter, 6] <- sum.resAa.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
# Parsing out Ad and Ad
sum.resAd.Ad <- as.data.frame(matrix(0,6,6))
colnames(sum.resAd.Ad) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAd.Ad) <- c("Ad1 / Ad2", "Ad2 / Ad1", "Ad1 * Ad2", "Ad1 + Ad2",
"Ad1 - Ad2", "Ad2 - Ad1")
for(i in seq(from=24001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAd.Ad[, j] <- sum.resAd.Ad[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAd.Ad[counter, 6] <- sum.resAd.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
res <- read.csv("../results/sim.results.csv")
# Parsing out Aa and Aa
sum.resAa.Aa <- as.data.frame(matrix(0,6,6))
colnames(sum.resAa.Aa) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAa.Aa) <- c("Aa1 / Aa2", "Aa2 / Aa1", "Aa1 * Aa2", "Aa1 + Aa2",
"Aa1 - Aa2", "Aa2 - Aa1")
for(i in seq(from=1, by=8, length.out=1000)){
for(j in 1:5){
sum.resAa.Aa[, j] <- sum.resAa.Aa[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Aa[counter, 6] <- sum.resAa.Aa[counter, 6] + 1
}
counter <- counter + 1
}
}
write.csv(sum.resAa.Aa, file = resAa.Aa.csv, now.names=F)
write.csv(sum.resAa.Aa, file = resAa.Aa.csv, row.names=F)
write.csv(sum.resAa.Aa, file = "resAa.Aa.csv", row.names=F)
write.csv(sum.resAa.Aa, file = "resAa.Aa.csv", row.names=T)
res <- read.csv("../results/sim.results.csv")
# Parsing out Ad and Ad
sum.resAd.Ad <- as.data.frame(matrix(0,6,6))
colnames(sum.resAd.Ad) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAd.Ad) <- c("Ad1 / Ad2", "Ad2 / Ad1", "Ad1 * Ad2", "Ad1 + Ad2",
"Ad1 - Ad2", "Ad2 - Ad1")
for(i in seq(from=24001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAd.Ad[, j] <- sum.resAd.Ad[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAd.Ad[counter, 6] <- sum.resAd.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
write.csv(sum.resAd.Ad, file = "../results/resAd.Ad.csv", row.names=T)
res <- read.csv("../results/sim.results.csv")
# Parsing out Aa and Aa
sum.resAa.Aa <- as.data.frame(matrix(0,6,6))
colnames(sum.resAa.Aa) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAa.Aa) <- c("Aa1 / Aa2", "Aa2 / Aa1", "Aa1 * Aa2", "Aa1 + Aa2",
"Aa1 - Aa2", "Aa2 - Aa1")
for(i in seq(from=1, by=8, length.out=1000)){
for(j in 1:5){
sum.resAa.Aa[, j] <- sum.resAa.Aa[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Aa[counter, 6] <- sum.resAa.Aa[counter, 6] + 1
}
counter <- counter + 1
}
}
write.csv(sum.resAa.Aa, file = "../results/resAa.Aa.csv", row.names=T)
# Parsing out Aa and Ad
sum.resAa.Ad <- as.data.frame(matrix(0,6,6))
colnames(sum.resAa.Ad) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAa.Ad) <- c("Aa / Ad", "Ad / Aa", "Aa * Ad", "Aa + Ad",
"Aa - Ad", "Ad - Aa") # these now names change
for(i in seq(from=8001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAa.Ad[, j] <- sum.resAa.Ad[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAa.Ad[counter, 6] <- sum.resAa.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
write.csv(sum.resAa.Ad, file = "../results/resAa.Ad.csv", row.names=T)
# Parsing out Ad and Ad
sum.resAd.Ad <- as.data.frame(matrix(0,6,6))
colnames(sum.resAd.Ad) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.resAd.Ad) <- c("Ad1 / Ad2", "Ad2 / Ad1", "Ad1 * Ad2", "Ad1 + Ad2",
"Ad1 - Ad2", "Ad2 - Ad1")
for(i in seq(from=24001, by=8, length.out=1000)){ # this line changes
for(j in 1:5){
sum.resAd.Ad[, j] <- sum.resAd.Ad[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.resAd.Ad[counter, 6] <- sum.resAd.Ad[counter, 6] + 1
}
counter <- counter + 1
}
}
write.csv(sum.resAd.Ad, file = "../results/resAd.Ad.csv", row.names=T)
# Loading required libraries
library(viridis)
library(ggplot2)
library(reshape2)
# Loading required libraries
library(viridis)
library(ggplot2)
# Reading data from the CSV file
data <- read.csv("../results/resAa.Aa.csv", header = TRUE)
# Reshaping the data to a long format for ggplot
data_long <- melt(data)
# Loading required libraries
library(viridis)
library(ggplot2)
# Reading data from the CSV file
data <- read.csv("../results/resAa.Aa.csv", header = TRUE)
View(data)
# Convert the data frame to a matrix
data_matrix <- as.matrix(data)
# Normalizing the values to the 0-1000 scale
max_value <- max(data_matrix, na.rm = TRUE)
min_value <- min(data_matrix, na.rm = TRUE)
library(ggplot2)
library(viridis)
# Reading data from the CSV file
data <- read.csv('/mnt/data/resAa.Aa.csv', header = TRUE, row.names = 1)
# Reading data from the CSV file
data <- read.csv("../results/resAa.Aa.csv", header = TRUE, row.names = 1)
View(data)
# Convert the data frame to a matrix
data_matrix <- as.matrix(data)
# Normalizing the values to the 0-1000 scale
max_value <- max(data_matrix, na.rm = TRUE)
min_value <- min(data_matrix, na.rm = TRUE)
normalized_matrix <- (data_matrix - min_value) / (max_value - min_value) * 1000
# Creating a data frame suitable for ggplot
data_long <- expand.grid(Row = rownames(data_matrix),
Column = colnames(data_matrix))
data_long$Value <- as.vector(normalized_matrix)
View(data_long)
# Creating the plot
ggplot(data_long, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_viridis(name = "Value", limits = c(0, 1000)) +
labs(x = "Column", y = "Row", title = "Matrix Visualization with Viridis Palette") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
library(viridis)
# Reading data from the CSV file
data <- read.csv("../results/resAa.Aa.csv", header = TRUE, row.names = 1)
# Convert the data frame to a matrix
data_matrix <- as.matrix(data)
# Creating a data frame suitable for ggplot
data_long <- expand.grid(Row = rownames(data_matrix),
Column = colnames(data_matrix))
data_long$Value <- as.vector(normalized_matrix)
data_long$Value <- as.vector(data_matrix)
# Creating the plot
ggplot(data_long, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_viridis(name = "Value", limits = c(0, 1000)) +
labs(x = "Column", y = "Row", title = "Matrix Visualization with Viridis Palette") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Creating the plot
ggplot(data_long, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_viridis(name = "Value", limits = c(0, 1000)) +
labs(x = "Column", y = "Row", title = "Component Traits: Aa & Aa") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
library(viridis)
##### colored matrix - Aa & Ad #####
data <- read.csv("../results/resAa.Ad.csv", header = TRUE, row.names = 1)
# Convert the data frame to a matrix
data_matrix <- as.matrix(data)
# Creating a data frame suitable for ggplot
data_long <- expand.grid(Row = rownames(data_matrix),
Column = colnames(data_matrix))
data_long$Value <- as.vector(data_matrix)
# Creating the plot
ggplot(data_long, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_viridis(name = "Value", limits = c(0, 1000)) +
labs(x = "Architectures", y = "Functions", title = "Component Traits: Aa & Ad") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
##### colored matrix - Aa & Ad #####
data <- read.csv("../results/resAd.Ad.csv", header = TRUE, row.names = 1)
# Convert the data frame to a matrix
data_matrix <- as.matrix(data)
# Creating a data frame suitable for ggplot
data_long <- expand.grid(Row = rownames(data_matrix),
Column = colnames(data_matrix))
data_long$Value <- as.vector(data_matrix)
# Creating the plot
ggplot(data_long, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_viridis(name = "Value", limits = c(0, 1000)) +
labs(x = "Architectures", y = "Functions", title = "Component Traits: Ad & Ad") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
##### colored matrix - Aa & Ad #####
setwd("~/Desktop/Repositories/comptraits/figures")
library(ggplot2)
library(viridis)
##### colored matrix - Aa & Aa #####
data <- read.csv("../results/resAa.Aa.csv", header = TRUE, row.names = 1)
# Convert the data frame to a matrix
data_matrix <- as.matrix(data)
# Creating a data frame suitable for ggplot
data_long <- expand.grid(Row = rownames(data_matrix),
Column = colnames(data_matrix))
data_long$Value <- as.vector(data_matrix)
# Creating the plot
ggplot(data_long, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_viridis(name = "Value", limits = c(0, 1000)) +
labs(x = "Architectures", y = "Functions", title = "Component Traits: Aa & Aa") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
library(viridis)
##### colored matrix - Aa & Aa #####
data <- read.csv("../results/resAa.Aa.csv", header = TRUE, row.names = 1)
# Convert the data frame to a matrix
data_matrix <- as.matrix(data)
# Creating a data frame suitable for ggplot
data_long <- expand.grid(Row = rownames(data_matrix),
Column = colnames(data_matrix))
data_long$Value <- as.vector(data_matrix)
# Creating the plot
ggplot(data_long, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_viridis(name = "Value", limits = c(0, 1000)) +
labs(x = "Architectures", y = "Functions", title = "Component Traits: Aa & Aa") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
##### colored matrix - Aa & Ad #####
data <- read.csv("../results/resAa.Ad.csv", header = TRUE, row.names = 1)
# Convert the data frame to a matrix
data_matrix <- as.matrix(data)
# Creating a data frame suitable for ggplot
data_long <- expand.grid(Row = rownames(data_matrix),
Column = colnames(data_matrix))
data_long$Value <- as.vector(data_matrix)
# Creating the plot
ggplot(data_long, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_viridis(name = "Value", limits = c(0, 1000)) +
labs(x = "Architectures", y = "Functions", title = "Component Traits: Aa & Ad") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
##### colored matrix - Ad & Ad #####
data <- read.csv("../results/resAd.Ad.csv", header = TRUE, row.names = 1)
# Convert the data frame to a matrix
data_matrix <- as.matrix(data)
# Creating a data frame suitable for ggplot
data_long <- expand.grid(Row = rownames(data_matrix),
Column = colnames(data_matrix))
data_long$Value <- as.vector(data_matrix)
# Creating the plot
ggplot(data_long, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_viridis(name = "Value", limits = c(0, 1000)) +
labs(x = "Architectures", y = "Functions", title = "Component Traits: Ad & Ad") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
res <- read.csv("../results/sim.results-epistatic.csv")
elar1 <- "Aa"
elar2 <- "Aa"
res <- read.csv("../results/sim.results-epistatic.csv")
elar1 <- "Aa"
elar2 <- "Aa"
GetTable <- function(res, elar1, elar2){
elar1hits <- which(res$trait == elar1)
elar2hits <- which(res$trait == elar2) - 1
starts <- intersect(elar1hits, elar2hits)
sum.res <- as.data.frame(matrix(0,6,6))
colnames(sum.res) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.res) <- c("1 / 2", "2 / 1", "1 * 2", "1 + 2",
"1 - 2", "2 - 1")
for(i in starts){
for(j in 1:5){
sum.res[, j] <- sum.res[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.res[counter, 6] <- sum.res[counter, 6] + 1
}
counter <- counter + 1
}
}
sum.res <- sum.res/length(starts)
print(paste(length(starts), "datsets match your request"))
return(sum.res)
}
a.a.res <- GetTable(res, elar1, elar2)
res <- read.csv("../results/sim.results.csv")
#res <- read.csv("../results/sim.results-epistatic.csv")
elar1 <- "Aa"
elar2 <- "Aa"
GetTable <- function(res, elar1, elar2){
elar1hits <- which(res$trait == elar1)
elar2hits <- which(res$trait == elar2) - 1
starts <- intersect(elar1hits, elar2hits)
sum.res <- as.data.frame(matrix(0,6,6))
colnames(sum.res) <- c("Aa","Ad","AaAa","AaAd","AdAd", "NA")
row.names(sum.res) <- c("1 / 2", "2 / 1", "1 * 2", "1 + 2",
"1 - 2", "2 - 1")
for(i in starts){
for(j in 1:5){
sum.res[, j] <- sum.res[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.res[counter, 6] <- sum.res[counter, 6] + 1
}
counter <- counter + 1
}
}
sum.res <- sum.res/length(starts)
print(paste(length(starts), "datsets match your request"))
return(sum.res)
}
a.a.res <- GetTable(res, elar1, elar2)
View(a.a.res)
