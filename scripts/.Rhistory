for(i in 1:1000){ #next line is making a new population
new.pop<- sample(c(s1, s2))
diff[i]<- mean(new.pop[1:350]) -
mean(new.pop[351:700]) #this is when you add line 43 as diff as an empty vector
}
plot(density(diff))
obs.stat <- mean(s1)-mean(s2)
abline(v=obs.stat)
emp.pval <- sum(diff > obs.stat)/length(diff)
power.t.test(, delta=25, sd=50, sig.level = .01, power=.8)
install.packages("ggplot2")
install.packages("ggraptR")
install.packages("viridis")
sample(1:20)
sample(1:20. 3)
sample(1:20, 3)
sample(1:20, 45)
sample(1:20, 45, replace=TRUE)
sample(1:20, 100, replace=TRUE)
sample(1:7, 100, replace=T)
sample (1:2, 50, replace=T)
setwd("~/Desktop")
setwd("~/Desktop/unfinished new data/done done/baghat-1984")
library(SAGA2)
d1 <- read.csv("internode.num1.csv")) # establish the basic data frame
library(SAGA2)
d1 <- read.csv("internode.num1.csv")
View(d1)
setwd("~/Desktop/unfinished new data/done done/starmer-1998/starmer csvs")
library(SAGA2)
d1 <- read.csv("ova18.csv")
res <- LCA(data=d1,
SCS="NSC", parental="calc", env=FALSE,
max.pars=7, ret.all=F)
View(d1)
setwd("~/Desktop/Repositories/LCAdata/unfin")
list.files()
list.files()
load("~/Desktop/Repositories/LCAdata/results/reduced.model.run.RData")
View(res)
shiny::runApp('Desktop/Repositories/LCAdata/shinyapp')
runApp('Desktop/Repositories/LCAdata/shinyapp')
knitr::opts_chunk$set(echo = TRUE)
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
```{r setup, include=FALSE}
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
pop <- rep(0,7)
names(pop) <- c("X0X0", "X0X1", "X1X1",
"X0Y0", "X0Y1", "X1Y0", "X1Y1")
N <- 1000
s <- 0.2
r <- 0.01
h <- 0.5
gen <- 132
iter <- 231
pop[1:7] <- c(125, 250, 125,
125, 125, 125, 125)
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitnness[4:7])
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitness[4:7])
table(femaleparents)
table(maleparents)
#cat the 500 females and 500 males into vector of 1000 elements
parents <- c(femaleparents, maleparents)
for(i in 1:7){
pop[i]<-sum(parents ==i)
}
pop <- rep(0,7)
names(pop) <- c("X0X0", "X0X1", "X1X1",
"X0Y0", "X0Y1", "X1Y0", "X1Y1")
N <- 1000
s <- 0.2
r <- 0.01
h <- 0.5
gen <- 132
iter <- 231
pop[1:7] <- c(125, 250, 125,
125, 125, 125, 125)
# pick parents (aka selection)
# vector of fitness values
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitness[4:7])
table(femaleparents)
table(maleparents)
#cat the 500 females and 500 males into vector of 1000 elements
parents <- c(femaleparents, maleparents)
for(i in 1:7){
pop[i]<-sum(parents ==i)
}
knitr::opts_chunk$set(echo = TRUE)
pop <- rep(0,7)
names(pop) <- c("X0X0", "X0X1", "X1X1",
"X0Y0", "X0Y1", "X1Y0", "X1Y1")
N <- 1000
s <- 0.2
r <- 0.01
h <- 0.5
gen <- 132
iter <- 231
pop[1:7] <- c(125, 250, 125,
125, 125, 125, 125)
# pick parents (aka selection)
# vector of fitness values
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitness[4:7])
table(femaleparents)
table(maleparents)
#cat the 500 females and 500 males into vector of 1000 elements
parents <- c(femaleparents, maleparents)
for(i in 1:7){
pop[i]<-sum(parents ==i)
}
# gametogenesis
# fertilization
pop
knitr::opts_chunk$set(echo = TRUE)
pop <- rep(0,7)
names(pop) <- c("X0X0", "X0X1", "X1X1",
"X0Y0", "X0Y1", "X1Y0", "X1Y1")
N <- 1000
s <- 0.2
r <- 0.01
h <- 0.5
gen <- 132
iter <- 231
pop[1:7] <- c(125, 250, 125,
125, 125, 125, 125)
# pick parents (aka selection)
# vector of fitness values
fitness <- c(1, 1/(1+h*s), 1/(1+s),
1, 1+h*s, 1+h*s, 1+s)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitness[4:7])
table(femaleparents)
table(maleparents)
#cat the 500 females and 500 males into vector of 1000 elements
parents <- c(femaleparents, maleparents)
for(i in 1:7){
pop[i]<-sum(parents ==i)
}
pop
# gametogenesis
# fertilization
help("binom.test")
shiny::runApp('Desktop/Repositories/LCAdata/shinyapp')
runApp('Desktop/Repositories/LCAdata/shinyapp')
#Life history versus morphological traits figure script
######## figure using only unique combinations of species-phenotype#######
dat <- read.csv("../../results/thinned.comp.csv")
#Life history versus morphological traits figure script
######## figure using only unique combinations of species-phenotype#######
dat <- read.csv("../../results/thinned.comp.csv")
setwd("~/Desktop/Repositories/LCAdata/figures")
#Life history versus morphological traits figure script
######## figure using only unique combinations of species-phenotype#######
dat <- read.csv("../../results/thinned.comp.csv")
#Life history versus morphological traits figure script
######## figure using only unique combinations of species-phenotype#######
dat <- read.csv("../results/thinned.comp.csv")
View(dat)
#Jorja Elliott May 18 2023
# calculate p-values and generate plots
res <- read.csv("../results/complete.results.csv")
res <- res[!is.na(res$epi),]
combos <- paste(res$species, "-", res$trait, sep="")
for(i in 1:length(unique)){
hit <-which(combos == unique[i])
if(i == 1){
new.res <- res[hit[1],c(3, 6,7, 12,4)]
}else{
new.res[nrow(new.res) + 1, 1:5] <- res[hit[1],c(3,6,7,12,4)]
}
new.res[i, 1] <- mean(res$epi[hit])
new.res$combo[i] <- unique[i]
}
#Jorja Elliott May 18 2023
# calculate p-values and generate plots
res <- read.csv("../results/complete.results.csv")
res <- res[!is.na(res$epi),]
combos <- paste(res$species, "-", res$trait, sep="")
unique <- unique(combos)
for(i in 1:length(unique)){
hit <-which(combos == unique[i])
if(i == 1){
new.res <- res[hit[1],c(3, 6,7, 12,4)]
}else{
new.res[nrow(new.res) + 1, 1:5] <- res[hit[1],c(3,6,7,12,4)]
}
new.res[i, 1] <- mean(res$epi[hit])
new.res$combo[i] <- unique[i]
}
View(new.res)
View(res)
#Jorja Elliott May 18 2023
# calculate p-values and generate plots
res <- read.csv("../results/complete.results.csv")
res <- res[!is.na(res$epi),]
combos <- paste(res$species, "-", res$trait, sep="")
unique <- unique(combos)
for(i in 1:length(unique)){
hit <-which(combos == unique[i])
if(i == 1){
new.res <- res[hit[1],c(1,2,3,6,7,12,4)]
}else{
new.res[nrow(new.res) + 1, 1:7] <- res[hit[1],c(1,2,3,6,7,12,4)]
}
new.res[i, 1] <- mean(res$epi[hit])
new.res$combo[i] <- unique[i]
}
View(new.res)
rm(res, hit, i, unique, combos)
setwd("~/Desktop")
write.csv(new.res, "thinned_dominance.csv")
dat <- read.csv("thinned_dominance.csv")
View(new.res)
LH <- sort(dat[dat$class == "LH", 2])
M <- sort(dat[dat$class == "M", 2])
LHx <- seq(from=0, to=100, length.out=length(LH))
Mx <- seq(from=0, to=100, length.out=length(M))
plot(0,0,col="white",xlim=c(0,100),ylim=c(0,1),
xaxt="n", xlab="proportion of datasets analyzed",
ylab="proportion dominance")
axis(side=1, at=c(0,50,100), c("0%","50%","100%"))
lines(y=LH, x=LHx, col= rgb(0.6, 0.2, 1),lwd=3) #LH
lines(y=M, x=Mx, col=rgb(0.2, 0.8, 0.4),lwd=3) #M
points(y=LH, x=LHx, col=rgb(0.6, 0.2, 1),pch=16, cex=.9)
points(y=M, x=Mx, col=rgb(0.2, 0.8, 0.4),pch=16, cex=.9)
legend("topleft", legend=c(paste("life history (n=", length(LHx),")", sep=""),
paste("morphological (n=", length(Mx),")", sep="")),
fill=c(rgb(0.6, 0.2, 1), rgb(0.2, 0.8, 0.4)), cex=0.8, bty="n")
t.test(x=dat$dom, y=dat$class)
cor.test(x=dat$dom, y=dat$class)
View(new.res)
View(dat)
#write.csv(new.res, "../results/thinned.comp.csv")
res2 <- new.res
###### Life history
lh <- res2$dom[res2$class == "LH"]
mo <- res2$dom[res2$class == "M"]
# hyp lh should be larger
obs.diff <- mean(lh) - mean(mo)
null.dist <- c()
for(i in 1:10000){
keys <- sample(res2$class) == "LH"
null.dist[i] <- mean(res2$dom[keys]) - mean(res2$dom[!keys])
}
plot(density(null.dist), main="", xlab="mean difference in epistatic contribution
(LH-M)", ylab="density", xlim=c(-0.15,0.15))
polygon(density(null.dist), col=rgb(0.6, 0.2, 1, 0.1))
abline(v=obs.diff,lwd=2,col=rgb(0.6, 0.2, 1))
sum(null.dist>=obs.diff)/10000
View(new.res)
library(readr)
library(dplyr)
# Read the data from the CSV file
data <- read.csv("thinned_dominance.csv", header = TRUE, stringsAsFactors = FALSE)
# Extract the relevant columns
dominance_values <- data[,2]
trait_types <- data[,4]
# Calculate the proportions for life history and morphological traits
prop_LH <- mean(dominance_values[trait_types == "LH"])
prop_M <- mean(dominance_values[trait_types == "M"])
# Print the proportions
cat("Proportion of dominance in life history traits:", prop_LH, "\n")
cat("Proportion of dominance in morphological traits:", prop_M, "\n")
# Prepare counts for the proportion test
life_history_count <- sum(dominance_values[trait_types == "LH"])
morphological_count <- sum(dominance_values[trait_types == "M"])
n_life_history <- length(dominance_values[trait_types == "LH"])
n_morphological <- length(dominance_values[trait_types == "M"])
# Perform a statistical test to compare the proportions
test_result <- prop.test(x = c(life_history_count, morphological_count),
n = c(n_life_history, n_morphological),
alternative = "two.sided")
# Print the test result
print(test_result)
View(data)
# line cross analysis simulations
library(SAGA2)
starts <- seq(from=0, by=8, length.out=6000)
# For all sims we will use the cohorts P1, P2, F1, BC1, rBC1, BC2, rBC2
blank <- read.csv("../data/cross.structure.csv")[-c(5,7),]
# get the generating c-matrix
cmat <- read.csv("../data/sim data/gen.cmat.csv")[,-1]
replicate <- 1000
setwd("~/Desktop/Repositories/comptraits")
setwd("~/Desktop/Repositories/comptraits/scripts")
# line cross analysis simulations
library(SAGA2)
starts <- seq(from=0, by=8, length.out=6000)
# For all sims we will use the cohorts P1, P2, F1, BC1, rBC1, BC2, rBC2
blank <- read.csv("../data/cross.structure.csv")[-c(5,7),]
# get the generating c-matrix
cmat <- read.csv("../data/sim data/gen.cmat.csv")[,-1]
replicate <- 1000
getExpected <- function(dat, cmat){
res1 <- LCA(dat1, Cmatrix = cmat, SCS="NSC")
effects <- res1$varimp[which(as.numeric(res1$varimp[,2]) >= 0.5)]
eff2 <- which(colnames(res1$estimates) %in% effects)
valbeta <- c()
for(i in 1:length(eff2)){
checker <- abs(as.numeric(res1$estimates[,eff2[i]]))
hit <- checker[1] > checker[2]
if(hit){
valbeta <- c(valbeta, eff2[i])
}
}
val.ests <- res1$estimates[, c(1,valbeta)]
red.cmat <- cmat[,colnames(cmat) %in% colnames(val.ests)]
exp.cont <- as.data.frame(red.cmat)
for(i in 1:ncol(red.cmat)){
exp.cont[,i] <- as.numeric(red.cmat[,i]) * as.numeric(val.ests[1,i])
}
x <- rowSums(exp.cont)
names(x) <- cmat[,1]
return(x)
}
val.ests <- res1$estimates[, c(1,valbeta)]
val.ests <- res1$estimates[, c(1,valbeta)]
res1 <- LCA(dat1, Cmatrix = cmat, SCS="NSC")
# line cross analysis simulations
library(SAGA2)
starts <- seq(from=0, by=8, length.out=6000)
# For all sims we will use the cohorts P1, P2, F1, BC1, rBC1, BC2, rBC2
blank <- read.csv("../data/cross.structure.csv")[-c(5,7),]
# get the generating c-matrix
cmat <- read.csv("../data/sim data/gen.cmat.csv")[,-1]
replicate <- 1000
res1 <- LCA(dat1, Cmatrix = cmat, SCS="NSC")
getExpected <- function(dat, cmat){
res1 <- LCA(dat1, Cmatrix = cmat, SCS="NSC")
effects <- res1$varimp[which(as.numeric(res1$varimp[,2]) >= 0.5)]
eff2 <- which(colnames(res1$estimates) %in% effects)
valbeta <- c()
for(i in 1:length(eff2)){
checker <- abs(as.numeric(res1$estimates[,eff2[i]]))
hit <- checker[1] > checker[2]
if(hit){
valbeta <- c(valbeta, eff2[i])
}
}
val.ests <- res1$estimates[, c(1,valbeta)]
red.cmat <- cmat[,colnames(cmat) %in% colnames(val.ests)]
exp.cont <- as.data.frame(red.cmat)
for(i in 1:ncol(red.cmat)){
exp.cont[,i] <- as.numeric(red.cmat[,i]) * as.numeric(val.ests[1,i])
}
x <- rowSums(exp.cont)
names(x) <- cmat[,1]
return(x)
}
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
library(readr)
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
# Initialize the results matrix
matrix_columns <- c(names(df)[3:7], "NA")
matrix_rows <- df[3:8, 1]
results_matrix <- matrix(0, nrow = length(matrix_rows), ncol = length(matrix_columns),
dimnames = list(matrix_rows, matrix_columns))
# Iterate through the first 8001 rows
for (i in 1:min(8001, nrow(df))) {
if (df[i, 1] == "Aa" && df[i, 2] == "Aa") {
for (j in 1:6) {
if ((i + j) <= nrow(df)) {
non_na_found <- FALSE
for (k in 3:7) {
if (!is.na(df[i + j, k])) {
results_matrix[df[i + j, 1], names(df)[k]] <- results_matrix[df[i + j, 1], names(df)[k]] + 1
non_na_found <- TRUE
}
}
if (!non_na_found) {
results_matrix[df[i + j, 1], "NA"] <- results_matrix[df[i + j, 1], "NA"] + 1
}
}
}
}
}
# Return the results matrix
print(results_matrix)
View(results_matrix)
View(results_matrix)
View(df)
library(readr)
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
# Create the results matrix
row_names <- c("Aa", "Ad", "AaAa", "AaAd", "AdAd", "NA")
column_names <- c("Aa/Aa", "Aa/Aa", "Aa*Aa", "Aa+Aa", "Aa-Aa", "Aa-Aa")
results_matrix <- matrix(0, nrow = length(row_names), ncol = length(column_names),
dimnames = list(row_names, column_names))
# Function to update the results matrix
update_matrix <- function(row_number) {
for (col in 3:7) {
if (!is.na(df[row_number, col])) {
row_name <- df[row_number, 1]
col_name <- df[1, col]
results_matrix[row_name, col_name] <- results_matrix[row_name, col_name] + 1
}
}
}
# Iterate through the file
i <- 1
while (i <= nrow(df)) {
if (df[i, 1] != "Aa" || df[i + 1, 1] != "Aa") {
break
}
for (j in 3:8) {
if ((i + j) <= nrow(df)) {
update_matrix(i + j)
}
}
i <- i + 8
}
library(readr)
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
# Create the results matrix
row_names <- c("Aa", "Ad", "AaAa", "AaAd", "AdAd", "NA")
column_names <- c("Aa/Aa", "Aa/Aa", "Aa*Aa", "Aa+Aa", "Aa-Aa", "Aa-Aa")
results_matrix <- matrix(0, nrow = length(row_names), ncol = length(column_names),
dimnames = list(row_names, column_names))
# Function to update the results matrix
update_matrix <- function(row_number) {
for (col in 3:7) {
if (!is.na(df[row_number, col])) {
row_name <- as.character(df[row_number, 1])
col_name <- as.character(names(df)[col])
if (row_name %in% row_names && col_name %in% column_names) {
results_matrix[row_name, col_name] <- results_matrix[row_name, col_name] + 1
}
}
}
}
# Iterate through the file
i <- 1
while (i <= nrow(df) - 1) {
if (df[i, 1] != "Aa" || df[i + 1, 1] != "Aa") {
break
}
for (j in 2:7) {
if ((i + j) <= nrow(df)) {
update_matrix(i + j)
}
}
i <- i + 8
}
# Print the results matrix
print(results_matrix)
library(readr)
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
# Create the results matrix
row_names <- c("Aa", "Ad", "AaAa", "AaAd", "AdAd", "NA")
column_names <- c("Aa/Aa", "Aa/Aa", "Aa*Aa", "Aa+Aa", "Aa-Aa", "Aa-Aa")
results_matrix <- matrix(0, nrow = length(row_names), ncol = length(column_names),
dimnames = list(row_names, column_names))
View(results_matrix)
library(readr)
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
# Create the results matrix
column_names <- c("Aa", "Ad", "AaAa", "AaAd", "AdAd", "NA")
row_names <- c("Aa/Aa", "Aa/Aa", "Aa*Aa", "Aa+Aa", "Aa-Aa", "Aa-Aa")
results_matrix <- matrix(0, nrow = length(column_names), ncol = length(row_names),
dimnames = list(column_names, row_names))
View(results_matrix)
library(readr)
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
# Create the results matrix
column_names <- c("Aa", "Ad", "AaAa", "AaAd", "AdAd", "NA")
row_names <- c("Aa/Aa", "Aa/Aa", "Aa*Aa", "Aa+Aa", "Aa-Aa", "Aa-Aa")
results_matrix <- matrix(0, nrow = length(row_names), ncol = length(column_names),
dimnames = list(column_names, row_names))
View(results_matrix)
library(readr)
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
# Create the results matrix
column_names <- c("Aa", "Ad", "AaAa", "AaAd", "AdAd", "NA")
row_names <- c("Aa/Aa", "Aa/Aa", "Aa*Aa", "Aa+Aa", "Aa-Aa", "Aa-Aa")
results_matrix <- matrix(0, nrow = length(row_names), ncol = length(column_names),
dimnames = list(row_names, column_names))
View(results_matrix)
View(results_matrix)
row_names <- c("Aa/Aa", "Aa/Aa", "Aa*Aa", "Aa+Aa", "Aa-Aa", "Aa-Aa")
library(readr)
# Load the CSV file
df <- read_csv("../results/sim.results.csv")
# Create the results matrix
column_names <- c("Aa", "Ad", "AaAa", "AaAd", "AdAd", "NA")
row_names <- c("Aa/Aa", "Aa/Aa", "Aa*Aa", "Aa+Aa", "Aa-Aa", "Aa-Aa")
results_matrix <- matrix(0, nrow = length(row_names), ncol = length(column_names),
dimnames = list(row_names, column_names))
View(results_matrix)
