hist.default(all.fish)
norm.plot(all.fish)
norm(all.fish)
hist(norm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(20))
hist(rexp(40))
hist(rexp(40))
hist(rexp(40))
hist(rexp(40))
pop1 <- rexp(n=110)
pop2 <- rexp(n=110, rate=.9)
pop1 <- rexp(n=110)
pop2 <- rexp(n=110, rate.6)
plot(density(pop1))
lines(density(pop2))
pop1 <- rexp(n=110)
pop2 <- rexp(n=110, rate=.6)
plot(density(pop1))
lines(density(pop2))
obs.stat <- mean(pop1) - mean(pop2)
obs.stat <- round(mean(pop1) - mean(pop2), digits=4)
c(pop1, pop2)
new.dat <- sample(c(pop1, pop2))
mean(new.dat[1:110) - mean(new.dat[111:220])
sim.stat <- mean(new.dat[1:110]) - mean(new.dat[111:220])
sim.stat <- c()
for(i in 1:1000){
new.dat <- sample(c(pop1, pop2))
sim.stat[i] <- mean(new.dat[1:110]) - mean(new.dat[111:220])
}
plot(density(sim.stat))
abline(v=obs.stat, col="red")
obs.stat<sim.stat
obs.stat>sim.stat
sim.stat<obs.stat
sum(sim.stat<obs.stat)
sum(sim.stat<obs.stat)/length(sim.stat)
for(i in 1:10000){
new.dat <- sample(c(pop1, pop2))
sim.stat[i] <- mean(new.dat[1:110]) - mean(new.dat[111:220])
}
plot(density(sim.stat))
abline(v=obs.stat, col="red") #this shows that the observed data is very different than the expected (simulated data)
sum(sim.stat<obs.stat)/length(sim.stat)
sum(sim.stat<obs.stat)
install.packages("car")
#t.test
data("iris")
#permutations
view(iris)
#permutations
View(iris)
hist(iris$Sepal.Width)
boxplot(iris$Sepal.Width~iris$Species)
help("t.test")
iris$Species == "versicolor"
t.test(x=iris$Sepal.Width[iris$Species == "versicolor"],
y=iris$Sepal.Width[iris$Species == "virginica"])
#paired t.test
init.bp <- sample(rnorm(n=100, mean=180, sd=10))
hist(init.bp)
help(rnorm)
#now we are treating these patients with bp meds
post.bp <- sample(rnorm(n=100, mean=(init.bp-20) ,
sd=10))
plot(post.bp~init.bp)
t.test(x=init.bp, y=post.bp, paired=T, alternative="l")
t.test(y=init.bp, x=post.bp, paired=T, alternative="l")
hist(init.bp-post.bp)
#one sample t.test
#difference between what we expect and what we observe. Is there a change? Yes or not
spawners <- rpois(10, 450)
t.test(spawners, mu=450)
samp1 <- rexp(n=500, rate=1)
samp2 <- rexp(500, rate=1.5)
print(i)
for(i in 1:1000)
print(i)
samp1 <- rexp(n=500, rate=1)
samp2 <- rexp(500, rate=1.5)
for(i in 1:1000)
print(i)
for(i in 1:1000){
print(i)
}
s1 <- rexp(n=350, rate=1)
s2 <- rexp(350, rate=1.5)
for(i in 1:1000){
new.pop<- sample(c(s1, s2))
}
rm(samp1)
rm(samp2)
s1 <- rexp(n=350, rate=1)
s2 <- rexp(350, rate=1.5)
diff <- c()
#repeat this 1000 times
for(i in 1:1000){ #next line is making a new population
new.pop<- sample(c(s1, s2))
diff <- mean(new.pop[1:350]) -
mean(new.pop[351:700]) #this is when you add line 43 as diff as an empty vector
}
s1 <- rexp(n=350, rate=1)
s2 <- rexp(350, rate=1.5)
diff <- c()
#repeat this 1000 times
for(i in 1:1000){ #next line is making a new population
new.pop<- sample(c(s1, s2))
diff[i]<- mean(new.pop[1:350]) -
mean(new.pop[351:700]) #this is when you add line 43 as diff as an empty vector
}
plot(density(diff))
plot(density(diff))
obs.stat <- mean(s1)-mean(s2)
abline(v=obs.stat)
emp.pval <- sum(diff > obs.stat)/length(diff)
plot(density(diff))
s1 <- rexp(n=350, rate=1)
s2 <- rexp(350, rate=1.1)
diff <- c()
#repeat this 1000 times
for(i in 1:1000){ #next line is making a new population
new.pop<- sample(c(s1, s2))
diff[i]<- mean(new.pop[1:350]) -
mean(new.pop[351:700]) #this is when you add line 43 as diff as an empty vector
}
plot(density(diff))
obs.stat <- mean(s1)-mean(s2)
abline(v=obs.stat)
emp.pval <- sum(diff > obs.stat)/length(diff)
power.t.test(, delta=25, sd=50, sig.level = .01, power=.8)
install.packages("ggplot2")
install.packages("ggraptR")
install.packages("viridis")
sample(1:20)
sample(1:20. 3)
sample(1:20, 3)
sample(1:20, 45)
sample(1:20, 45, replace=TRUE)
sample(1:20, 100, replace=TRUE)
sample(1:7, 100, replace=T)
sample (1:2, 50, replace=T)
setwd("~/Desktop")
setwd("~/Desktop/unfinished new data/done done/baghat-1984")
library(SAGA2)
d1 <- read.csv("internode.num1.csv")) # establish the basic data frame
library(SAGA2)
d1 <- read.csv("internode.num1.csv")
View(d1)
setwd("~/Desktop/unfinished new data/done done/starmer-1998/starmer csvs")
library(SAGA2)
d1 <- read.csv("ova18.csv")
res <- LCA(data=d1,
SCS="NSC", parental="calc", env=FALSE,
max.pars=7, ret.all=F)
View(d1)
setwd("~/Desktop/Repositories/LCAdata/unfin")
list.files()
list.files()
load("~/Desktop/Repositories/LCAdata/results/reduced.model.run.RData")
View(res)
shiny::runApp('Desktop/Repositories/LCAdata/shinyapp')
runApp('Desktop/Repositories/LCAdata/shinyapp')
knitr::opts_chunk$set(echo = TRUE)
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
```{r setup, include=FALSE}
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
pop <- rep(0,7)
names(pop) <- c("X0X0", "X0X1", "X1X1",
"X0Y0", "X0Y1", "X1Y0", "X1Y1")
N <- 1000
s <- 0.2
r <- 0.01
h <- 0.5
gen <- 132
iter <- 231
pop[1:7] <- c(125, 250, 125,
125, 125, 125, 125)
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitnness[4:7])
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitness[4:7])
table(femaleparents)
table(maleparents)
#cat the 500 females and 500 males into vector of 1000 elements
parents <- c(femaleparents, maleparents)
for(i in 1:7){
pop[i]<-sum(parents ==i)
}
pop <- rep(0,7)
names(pop) <- c("X0X0", "X0X1", "X1X1",
"X0Y0", "X0Y1", "X1Y0", "X1Y1")
N <- 1000
s <- 0.2
r <- 0.01
h <- 0.5
gen <- 132
iter <- 231
pop[1:7] <- c(125, 250, 125,
125, 125, 125, 125)
# pick parents (aka selection)
# vector of fitness values
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitness[4:7])
table(femaleparents)
table(maleparents)
#cat the 500 females and 500 males into vector of 1000 elements
parents <- c(femaleparents, maleparents)
for(i in 1:7){
pop[i]<-sum(parents ==i)
}
knitr::opts_chunk$set(echo = TRUE)
pop <- rep(0,7)
names(pop) <- c("X0X0", "X0X1", "X1X1",
"X0Y0", "X0Y1", "X1Y0", "X1Y1")
N <- 1000
s <- 0.2
r <- 0.01
h <- 0.5
gen <- 132
iter <- 231
pop[1:7] <- c(125, 250, 125,
125, 125, 125, 125)
# pick parents (aka selection)
# vector of fitness values
fitness <- c(1.2, 1, .8,
.8, 1, 1, 1.2)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitness[4:7])
table(femaleparents)
table(maleparents)
#cat the 500 females and 500 males into vector of 1000 elements
parents <- c(femaleparents, maleparents)
for(i in 1:7){
pop[i]<-sum(parents ==i)
}
# gametogenesis
# fertilization
pop
knitr::opts_chunk$set(echo = TRUE)
pop <- rep(0,7)
names(pop) <- c("X0X0", "X0X1", "X1X1",
"X0Y0", "X0Y1", "X1Y0", "X1Y1")
N <- 1000
s <- 0.2
r <- 0.01
h <- 0.5
gen <- 132
iter <- 231
pop[1:7] <- c(125, 250, 125,
125, 125, 125, 125)
# pick parents (aka selection)
# vector of fitness values
fitness <- c(1, 1/(1+h*s), 1/(1+s),
1, 1+h*s, 1+h*s, 1+s)
femaleparents <- sample(x=1:3, size=N/2, replace=T, prob=fitness[1:3])
maleparents <- sample(x=4:7, size=N/2, replace=T, prob=fitness[4:7])
table(femaleparents)
table(maleparents)
#cat the 500 females and 500 males into vector of 1000 elements
parents <- c(femaleparents, maleparents)
for(i in 1:7){
pop[i]<-sum(parents ==i)
}
pop
# gametogenesis
# fertilization
help("binom.test")
shiny::runApp('Desktop/Repositories/LCAdata/shinyapp')
runApp('Desktop/Repositories/LCAdata/shinyapp')
setwd("~/Desktop/Repositories/comptraits/scripts")
res <- read.csv("../results/sim.results.csv")
elar <- "Aa"
GetTable <- function(res, elar1, elar2){
elar1hits <- which(res$trait == elar1)
elar2hits <- which(res$trait == elar2) - 1
starts <- intersect(elar1hits, elar2hits)
sum.res <- as.data.frame(matrix(0,6,6))
colnames(sum.res) <- c("a","d","aa","ad","dd", "NA")
row.names(sum.res) <- c("1. / 2.", "2. / 1.", "1. * 2.", "1. + 2.",
"1. - 2.", "2. - 1.")
for(i in starts){
for(j in 1:5){
sum.res[, j] <- sum.res[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.res[counter, 6] <- sum.res[counter, 6] + 1
}
counter <- counter + 1
}
}
sum.res <- sum.res/length(starts)
print(paste(length(starts), "datsets match your request"))
return(sum.res)
}
res <- read.csv("../results/sim.results.csv")
elar <- "Aa"
#  if the row hits + 1 has a NA in column res$beta,
# move up a row and try it again. if it meets the
# criteria, then store that hit as a start. if it
# doesn't meet the criteria, discard that hit.
starts <- c()
for (i in 1:(nrow(res) - 1)) {
if (res$trait[i] == elar && !is.na(res$beta[i + 1])) {
starts <- c(starts, i)
} else {
if (i > 1) {
if (res$trait[i - 1] == elar && !is.na(res$beta[i])) {
starts <- c(starts, i - 1)
}
}
}
}
sum.res <- as.data.frame(matrix(0,6,6))
colnames(sum.res) <- c("a","d","aa","ad","dd", "NA")
row.names(sum.res) <- c("1. / 2.", "2. / 1.", "1. * 2.", "1. + 2.",
"1. - 2.", "2. - 1.")
for(i in starts){
for(j in 1:5){
sum.res[, j] <- sum.res[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.res[counter, 6] <- sum.res[counter, 6] + 1
}
counter <- counter + 1
}
}
sum.res <- sum.res/length(starts)
print(paste(length(starts), "datsets match your request"))
return(sum.res)
View(sum.res)
View(sum.res)
elar <- "Ad"
#  if the row hits + 1 has a NA in column res$beta,
# move up a row and try it again. if it meets the
# criteria, then store that hit as a start. if it
# doesn't meet the criteria, discard that hit.
starts <- c()
for (i in 1:(nrow(res) - 1)) {
if (res$trait[i] == elar && !is.na(res$beta[i + 1])) {
starts <- c(starts, i)
} else {
if (i > 1) {
if (res$trait[i - 1] == elar && !is.na(res$beta[i])) {
starts <- c(starts, i - 1)
}
}
}
}
sum.res <- as.data.frame(matrix(0,6,6))
colnames(sum.res) <- c("a","d","aa","ad","dd", "NA")
row.names(sum.res) <- c("1. / 2.", "2. / 1.", "1. * 2.", "1. + 2.",
"1. - 2.", "2. - 1.")
for(i in starts){
for(j in 1:5){
sum.res[, j] <- sum.res[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.res[counter, 6] <- sum.res[counter, 6] + 1
}
counter <- counter + 1
}
}
sum.res <- sum.res/length(starts)
print(paste(length(starts), "datsets match your request"))
return(sum.res)
View(sum.res)
GetMargTab <- function(res, elar){
#  if the row hits + 1 has a NA in column res$beta,
# move up a row and try it again. if it meets the
# criteria, then store that hit as a start. if it
# doesn't meet the criteria, discard that hit.
starts <- c()
for (i in 1:(nrow(res) - 1)) {
if (res$trait[i] == elar && !is.na(res$beta[i + 1])) {
starts <- c(starts, i)
} else {
if (i > 1) {
if (res$trait[i - 1] == elar && !is.na(res$beta[i])) {
starts <- c(starts, i - 1)
}
}
}
}
##########
sum.res <- as.data.frame(matrix(0,6,6))
colnames(sum.res) <- c("a","d","aa","ad","dd", "NA")
row.names(sum.res) <- c("1. / 2.", "2. / 1.", "1. * 2.", "1. + 2.",
"1. - 2.", "2. - 1.")
for(i in starts){
for(j in 1:5){
sum.res[, j] <- sum.res[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.res[counter, 6] <- sum.res[counter, 6] + 1
}
counter <- counter + 1
}
}
sum.res <- sum.res/length(starts)
print(paste(length(starts), "datsets match your request"))
return(sum.res)
}
res.all <- GetTable(res, elar="Aa")
res.all <- GetMargTab(res, elar="Aa")
View(res.all)
res.all <- GetMargTab(res, elar="Ad")
View(res.all)
res <- read.csv("../results/sim.results.csv")
GetMargTab <- function(res, elar){
#  if the row hits + 1 has a NA in column res$beta,
# move up a row and try it again. if it meets the
# criteria, then store that hit as a start. if it
# doesn't meet the criteria, discard that hit.
starts <- c()
for (i in 1:(nrow(res) - 1)) {
if (res$trait[i] == elar && !is.na(res$beta[i + 1])) {
starts <- c(starts, i)
} else {
if (i > 1) {
if (res$trait[i - 1] == elar && !is.na(res$beta[i])) {
starts <- c(starts, i - 1)
}
}
}
}
##########
sum.res <- as.data.frame(matrix(0,6,6))
colnames(sum.res) <- c("a","d","aa","ad","dd", "NA")
row.names(sum.res) <- c("1. / 2.", "2. / 1.", "1. * 2.", "1. + 2.",
"1. - 2.", "2. - 1.")
for(i in starts){
for(j in 1:5){
sum.res[, j] <- sum.res[, j] + as.numeric(!is.na(res[(i + 2):(i + 7), (j + 2)]))
}
counter <- 1
for(k in (i + 2):(i + 7)){
if(sum(is.na(res[k, 3:7])) == 5){
sum.res[counter, 6] <- sum.res[counter, 6] + 1
}
counter <- counter + 1
}
}
sum.res <- sum.res/length(starts)
print(paste(length(starts), "datsets match your request"))
return(sum.res)
}
res.a <- GetMargTab(res, elar="Aa")
res.d <- GetMargTab(res, elar="Ad")
View(res.a)
View(res.d)
setwd("C:/Users/Crystal Sanders/Desktop/comptraits/scripts")
# read in the data
dat <- read.csv("../results/sim.results-simplified-archs.csv")
# grab the rows that each dataset starts on
starts <- seq(from=1, by=8, length.out=6001)
# container for adding up successes
true.matrix <- as.data.frame(matrix(0, nrow = 18, ncol = 9))
true.matrix[, 1] <- c("a", "a", "d", "a", "a", "a", "d", "d", "d", "aa", "aa", "aa", "ad", "ad", "ad", "dd", "dd", "dd")
true.matrix[, 2] <- c("a", "d", "d", "aa", "ad", "dd", "aa", "ad", "dd", "aa", "ad", "dd", "aa", "ad", "dd", "aa", "ad", "dd")
colnames(true.matrix) <- c("first element", "second element", "1/2", "2/1", "1*2", "1+2", "1-2", "2-1", "total")
for(i in 1:(length(starts)-1)){
# get the current dataset to evaluate
foo <- dat[starts[i]:(starts[i+1]-1),]
# find columns that correspond to elemental architecture
# the hard coding on pulling it out of foo is correct as this never changes
arch1 <- which(colnames(foo) == foo[1,1])
arch2 <- which(colnames(foo) == foo[2,1])
# check each row of the current dataset where each row corresponds to
# a generating function. We want to count any row as a success only if
# it has the underlying elemental architecture and nothing eles
for(j in 3:8){
a <- !is.na(foo[j,arch1])
b <- !is.na(foo[j,arch2])
falarchs <- (3:7)[!3:7 %in% c(arch1,arch2)]
c <- is.na(foo[j, falarchs])
x <- true.matrix$`first element` == foo[1,1]
y <- true.matrix$`second element` == foo[2,1]
targ.row <- which(x+y == 2)
if(all(c(a,b,c))){
print("success")
# get the row to enter into
true.matrix[targ.row, j] <- true.matrix[targ.row, j] + 1
true.matrix[targ.row, 9] <- true.matrix[targ.row, 9] +1
}else{
print("failed again Heath")
true.matrix[targ.row, 9] <- true.matrix[targ.row, 9] +1
}
}
}
true.matrix[,3:8] <- round(true.matrix[,3:8] / (true.matrix$total/6), digits=2)
View(true.matrix)
